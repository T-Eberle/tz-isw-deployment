# https://fswb-documentation.knowis.net/4.0/setting-up-the-product/installing/installation-process.html
apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/categories: Openshift
    tekton.dev/displayName: helm client
    tekton.dev/pipelines.minVersion: 0.17.0
    tekton.dev/platforms: linux/amd64
    tekton.dev/tags: cli
  name: helm-client
  namespace: default
spec:
  description: |-
    This task runs commands against the cluster provided by user and if not provided then where the Task is being executed.
    OpenShift is a Kubernetes distribution from Red Hat which provides oc, the OpenShift CLI that complements kubectl for simplifying deployment and configuration applications on OpenShift.
  params:
    - default: helm help
      description: The Helm CLI arguments to run
      name: SCRIPT
      type: string
    - default: "3.14.4"
      description: The Helm Client Version to use
      name: VERSION
      type: string
  steps:
    - computeResources: {}
      image: alpine/helm:$(params.VERSION)
      name: oc
      script: |
        #!/usr/bin/env bash
        
        [[ "$(workspaces.manifest-dir.bound)" == "true" ]] && \
        cd $(workspaces.manifest-dir.path)
        set -x
        $(params.SCRIPT)
  workspaces:
    - description: The workspace which contains helm manifests (e.g. values.yaml) which we want to
        apply on the cluster.
      name: manifest-dir
      optional: true
---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: git-clone
  namespace: default
  labels:
    app.kubernetes.io/version: "0.5"
  annotations:
    tekton.dev/pipelines.minVersion: "0.21.0"
    tekton.dev/categories: Git
    tekton.dev/tags: git
    tekton.dev/displayName: "git clone"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
spec:
  description: >-
    These Tasks are Git tasks to work with repositories used by other tasks
    in your Pipeline.

    The git-clone Task will clone a repo from the provided url into the
    output Workspace. By default the repo will be cloned into the root of
    your Workspace. You can clone into a subdirectory by setting this Task's
    subdirectory param. This Task also supports sparse checkouts. To perform
    a sparse checkout, pass a list of comma separated directory patterns to
    this Task's sparseCheckoutDirectories param.
  workspaces:
    - name: output
      description: The git repo will be cloned onto the volume backing this Workspace.
    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
    - name: basic-auth
      optional: true
      description: |
        A Workspace containing a .gitconfig and .git-credentials file. These
        will be copied to the user's home before any git commands are run. Any
        other files in this Workspace are ignored. It is strongly recommended
        to use ssh-directory over basic-auth whenever possible and to bind a
        Secret to this Workspace over other volume types.
    - name: ssl-ca-directory
      optional: true
      description: |
        A workspace containing CA certificates, this will be used by Git to
        verify the peer with when fetching or pushing over HTTPS.
  params:
    - name: url
      description: Repository URL to clone from.
      type: string
    - name: revision
      description: Revision to checkout. (branch, tag, sha, ref, etc...)
      type: string
      default: ""
    - name: refspec
      description: Refspec to fetch before checking out revision.
      default: ""
    - name: submodules
      description: Initialize and fetch git submodules.
      type: string
      default: "true"
    - name: depth
      description: Perform a shallow clone, fetching only the most recent N commits.
      type: string
      default: "1"
    - name: sslVerify
      description: Set the `http.sslVerify` global git config. Setting this to `false` is not advised unless you are sure that you trust your git remote.
      type: string
      default: "true"
    - name: subdirectory
      description: Subdirectory inside the `output` Workspace to clone the repo into.
      type: string
      default: ""
    - name: sparseCheckoutDirectories
      description: Define the directory patterns to match or exclude when performing a sparse checkout.
      type: string
      default: ""
    - name: deleteExisting
      description: Clean out the contents of the destination directory if it already exists before cloning.
      type: string
      default: "true"
    - name: httpProxy
      description: HTTP proxy server for non-SSL requests.
      type: string
      default: ""
    - name: httpsProxy
      description: HTTPS proxy server for SSL requests.
      type: string
      default: ""
    - name: noProxy
      description: Opt out of proxying HTTP/HTTPS requests.
      type: string
      default: ""
    - name: verbose
      description: Log the commands that are executed during `git-clone`'s operation.
      type: string
      default: "true"
    - name: gitInitImage
      description: The image providing the git-init binary that this Task runs.
      type: string
      default: "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.21.0"
    - name: userHome
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
        the gitInitImage param with an image containing custom user configuration.
      type: string
      default: "/tekton/home"
  results:
    - name: commit
      description: The precise commit SHA that was fetched by this Task.
    - name: url
      description: The precise URL that was fetched by this Task.
  steps:
    - name: clone
      image: "$(params.gitInitImage)"
      env:
        - name: HOME
          value: "$(params.userHome)"
        - name: PARAM_URL
          value: $(params.url)
        - name: PARAM_REVISION
          value: $(params.revision)
        - name: PARAM_REFSPEC
          value: $(params.refspec)
        - name: PARAM_SUBMODULES
          value: $(params.submodules)
        - name: PARAM_DEPTH
          value: $(params.depth)
        - name: PARAM_SSL_VERIFY
          value: $(params.sslVerify)
        - name: PARAM_SUBDIRECTORY
          value: $(params.subdirectory)
        - name: PARAM_DELETE_EXISTING
          value: $(params.deleteExisting)
        - name: PARAM_HTTP_PROXY
          value: $(params.httpProxy)
        - name: PARAM_HTTPS_PROXY
          value: $(params.httpsProxy)
        - name: PARAM_NO_PROXY
          value: $(params.noProxy)
        - name: PARAM_VERBOSE
          value: $(params.verbose)
        - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
          value: $(params.sparseCheckoutDirectories)
        - name: PARAM_USER_HOME
          value: $(params.userHome)
        - name: WORKSPACE_OUTPUT_PATH
          value: $(workspaces.output.path)
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
          value: $(workspaces.basic-auth.bound)
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
          value: $(workspaces.basic-auth.path)
        - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
          value: $(workspaces.ssl-ca-directory.bound)
        - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
          value: $(workspaces.ssl-ca-directory.path)
      script: |
        #!/usr/bin/env sh
        set -eu

        if [ "${PARAM_VERBOSE}" = "true" ] ; then
          set -x
        fi


        if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
          chmod 400 "${PARAM_USER_HOME}/.git-credentials"
          chmod 400 "${PARAM_USER_HOME}/.gitconfig"
        fi

        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
          cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
          chmod 700 "${PARAM_USER_HOME}"/.ssh
          chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
        fi

        if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
           export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
        fi
        CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
          # or the root of a mounted volume.
          if [ -d "${CHECKOUT_DIR}" ] ; then
            # Delete non-hidden files and directories
            rm -rf "${CHECKOUT_DIR:?}"/*
            # Delete files and directories starting with . but excluding ..
            rm -rf "${CHECKOUT_DIR}"/.[!.]*
            # Delete files and directories starting with .. plus any other character
            rm -rf "${CHECKOUT_DIR}"/..?*
          fi
        }

        if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
          cleandir
        fi

        test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
        test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
        test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

        /ko-app/git-init \
          -url="${PARAM_URL}" \
          -revision="${PARAM_REVISION}" \
          -refspec="${PARAM_REFSPEC}" \
          -path="${CHECKOUT_DIR}" \
          -sslVerify="${PARAM_SSL_VERIFY}" \
          -submodules="${PARAM_SUBMODULES}" \
          -depth="${PARAM_DEPTH}" \
          -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
        cd "${CHECKOUT_DIR}"
        RESULT_SHA="$(git rev-parse HEAD)"
        EXIT_CODE="$?"
        if [ "${EXIT_CODE}" != 0 ] ; then
          exit "${EXIT_CODE}"
        fi
        printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
        printf "%s" "${PARAM_URL}" > "$(results.url.path)"
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: isw-deployment
  namespace: default
spec:
  params:
    - name: deleteExisting
      type: string
    - name: depth
      type: string
    - name: gitInitImage
      type: string
    - name: httpProxy
      type: string
    - name: httpsProxy
      type: string
    - name: noProxy
      type: string
    - name: refspec
      type: string
    - name: revision
      type: string
    - name: sparseCheckoutDirectories
      type: string
    - name: sslVerify
      type: string
    - name: subdirectory
      type: string
    - name: submodules
      type: string
    - name: url
      type: string
    - name: userHome
      type: string
    - name: verbose
      type: string
    - name: imageRegistry
      type: string
      default: "image-registry.openshift-image-registry.svc.cluster.local:5000"
  workspaces:
    - name: output
  tasks:
    - name: git-clone
      taskRef:
        name: git-clone
      params:
        - name: deleteExisting
          value: $(params.deleteExisting)
        - name: depth
          value: $(params.depth)
        - name: gitInitImage
          value: $(params.gitInitImage)
        - name: httpProxy
          value: $(params.httpProxy)
        - name: httpsProxy
          value: $(params.httpsProxy)
        - name: noProxy
          value: $(params.noProxy)
        - name: refspec
          value: $(params.refspec)
        - name: revision
          value: $(params.revision)
        - name: sparseCheckoutDirectories
          value: $(params.sparseCheckoutDirectories)
        - name: sslVerify
          value: $(params.sslVerify)
        - name: subdirectory
          value: $(params.subdirectory)
        - name: submodules
          value: $(params.submodules)
        - name: url
          value: $(params.url)
        - name: userHome
          value: $(params.userHome)
        - name: verbose
          value: $(params.verbose)
      workspaces:
        - name: output
          workspace: output
    - name: foundation
      runAfter:
        - git-clone
      taskRef:
        name: openshift-client
      params:
        - name: SCRIPT
          value: |
            #!/bin/bash
            oc apply -k ./foundation
            oc new-project chartmuseum || oc project chartmuseum
      workspaces:
        - name: manifest-dir
          workspace: output
    - name: chartmuseum
      taskRef:
        name: helm-client
      runAfter:
        - foundation
      workspaces:
        - name: manifest-dir
          workspace: output
      params:
        - name: SCRIPT
          value: |
            helm upgrade --wait --install chartmuseum  https://github.com/chartmuseum/charts/releases/download/chartmuseum-3.10.2/chartmuseum-3.10.2.tgz --namespace chartmuseum --debug -f chartmuseum/values.yaml
    - name: mongodb
      runAfter:
        - chartmuseum
      taskRef:
        name: helm-client
      workspaces:
        - name: manifest-dir
          workspace: output
      params:
        - name: SCRIPT
          value: |
            helm upgrade --wait --install mongodb https://charts.bitnami.com/bitnami/mongodb-15.1.7.tgz --namespace foundation --debug -f mongodb/values.yaml
    - name: third-party-post-install
      taskRef:
        name: openshift-client
      workspaces:
        - name: manifest-dir
          workspace: output
      params:
        - name: SCRIPT
          value: |
            oc apply -k thirdparty-post-install/
